stages:
- stage: Python_Packaging

  jobs:
    - job: Linux_py_GPU_Wheels
      timeoutInMinutes: 180
      workspace:
        clean: all
      # pool: Linux-Single-GPU-V100
      pool: Linux-Multi-GPU-V100-E2E3
      strategy:
        matrix:
          # Python36 Cuda10.2:
          #   PythonVersion: '3.6'
          #   CudaVersion: '10.2'
          #   DockerFile: 'Dockerfile.manylinux2014_training_cuda10_2'
          # Python36 Cuda11.1:
          #   PythonVersion: '3.6'
          #   CudaVersion: '11.1'
          #   DockerFile: 'Dockerfile.manylinux2014_training_cuda11_1'
          # Python37 Cuda10.2:
          #   PythonVersion: '3.7'
          #   CudaVersion: '10.2'
          #   DockerFile: 'Dockerfile.manylinux2014_training_cuda10_2'
          # Python37 Cuda11.1:
          #   PythonVersion: '3.7'
          #   CudaVersion: '11.1'
          #   DockerFile: 'Dockerfile.manylinux2014_training_cuda11_1'
          Python38 Cuda10.2:
            PythonVersion: '3.8'
            CudaVersion: '10.2'
            DockerFile: 'Dockerfile.ubuntu_cuda10_2'
          Python38 Cuda11.1:
            PythonVersion: '3.8'
            CudaVersion: '11.1'
            DockerFile: 'Dockerfile.ubuntu_cuda11_1'
          # Python39 Cuda10.2:
          #   PythonVersion: '3.9'
          #   CudaVersion: '10.2'
          #   DockerFile: 'Dockerfile.manylinux2014_training_cuda10_2'
          # Python39 Cuda11.1:
          #   PythonVersion: '3.9'
          #   CudaVersion: '11.1'
          #   DockerFile: 'Dockerfile.manylinux2014_training_cuda11_1'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: templates/set-python-manylinux-variables-step.yml

      - template: templates/get-docker-image-steps.yml
        parameters:
          Dockerfile: tools/ci_build/github/linux/docker/$(DockerFile)
          Context: tools/ci_build/github/linux/docker
          DockerBuildArgs: >-
            --build-arg PYTHON_VERSION=$(PythonVersion)
            --build-arg BUILD_UID=$(id -u)
          Repository: torchortci

      - task: CmdLine@2
        inputs:
          script: |
            mkdir -p $HOME/.onnx
            docker run --rm --gpus all \
              --volume $(Build.SourcesDirectory):/torch_ort_src \
              -e NVIDIA_VISIBLE_DEVICES=all \
              -e NIGHTLY_BUILD \
              -e BUILD_BUILDNUMBER \
              -w /torch_ort_src \
              torchortci \
                /usr/bin/python3 build.py
          workingDirectory: $(Build.SourcesDirectory)

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: 'dist/*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime_gpu

      - template: templates/component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - template: templates/clean-agent-build-directory-step.yml